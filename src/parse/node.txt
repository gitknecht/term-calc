use super::tree::ParseTree;
use super::super::token::{ParseToken, Operator};

pub struct ParseNode {
    operator: Operator,
    left: Box<ParseTree>,
    right: Box<ParseTree>,
} 

impl ParseNode {
    pub fn from(stream: &[ParseToken]) -> Result<Self, Error> {
        use ParseToken::*;
        
        fn find_close_bracket(stream: &[ParseToken], skip: usize) -> Option<usize> {
            let mut deep = 0;
            let iter = stream.into_iter().enumerate().skip(skip);
            
            for (idx, token) in iter {
                match *token {
                    Open => deep += 1,
                    Close => {
                        deep -= 1;
                        if deep == 0 {
                            return Some(idx)
                        }
                    }
                    _ => {}
                }
            }
            
            None
        }
        
        fn find_next_operator(stream: &[ParseToken], skip: usize) -> Option<(Operator, usize)> {
            let mut close_idx: Option<usize> = None;
            for (idx, token) in stream.into_iter().enumerate().skip(skip) {
                if let Some(close_idx) = close_idx {
                    if idx <= close_idx { continue }
                }
                match *token {
                    Op(op) => return Some((op, idx)),
                    Open => close_idx = find_close_bracket(stream, idx),
                    _ => {}
                }
            }
            
            None
        }
        
        let len = stream.len();
        if len == 0 { panic!("Stream is empty") }
        
        match stream[0] {
            Open => {
                if let Some(closing) = find_close_bracket(stream, 0) {
                    if closing == len -1 {
                        match ParseNode::from(&stream[1..len-1]) {
                            Ok(node) => return Ok(node),
                            Err(e) => return Err(e),
                        }
                    }
                } else {
                    panic!("Closing bracket not found")
                }
            }
            _ => {}
        }
        
        let mut iter = stream.into_iter().enumerate();
        let mut skip_to: Option<usize> = None;
        let mut left = ParseTree::Number(0f64);
        
        while let Some((idx, token)) = iter.next() {
            if let Some(i) = skip_to {
                if idx < i { continue }
            }
             
            match *token {
                Open => {
                    match find_close_bracket(stream, idx) {
                        Some(close) => {
                            left = ParseTree::from(&stream[idx..=close])?;
                            skip_to = Some(close +1);
                        }
                        None => panic!("Expected to find closing bracket")
                    }    
                }
                Op(op) => {
                    match op {
                        Operator::Minus => {
                            if idx == 0 {
                                left = ParseTree::Number(-1f64);
                                let right = ParseTree::from(&stream[idx+1..])?;
                                left = ParseTree::Node(Box::new(Self {
                                    operator: Operator::Multiply,
                                    left: Box::new(left),
                                    right: Box::new(right),
                                }));
                                break
                            } else {
                                match find_next_operator(&stream, idx) {
                                    Some((next_op, next_idx)) => {
                                        match next_op {
                                            // 1+1-2 -> (1+1)-2
                                            Operator::Plus |
                                            Operator::Minus => {
                                                
                                            }
                                            // 1+1*2 -> 1+(1*2)
                                            Operator::Multiply |
                                            Operator::Divide => {
                                                let right = ParseTree::from(&stream[idx+1..])?;
                                                left = ParseTree::Node (Box::new(Self {
                                                    operator: Operator::Minus,
                                                    left: Box::new(left),
                                                    right: Box::new(right),
                                                }));
                                                break
                                            }
                                        }
                                    }
                                    None => {
                                        let right = ParseTree::from(&stream[idx+1..])?;
                                        left = ParseTree::Node (Box::new(Self {
                                            operator: Operator::Minus,
                                            left: Box::new(left),
                                            right: Box::new(right),
                                        }));
                                        break
                                    }
                                }
                            }
                        }
                    }
                }
                Number(n) => left = ParseTree::Number(n as f64),
                // Prefix(op) => {
                //     match op {
                //         Operator::Minus => {
                //             if let Some((idx, token)) = iter.next() {
                //                 match *token {
                //                     Number(n) => {
                //                         left = ParseTree::Number(-1f64);
                //                         let right = ParseTree::Number(n as f64);
                //                         left = ParseTree::Node(Box::new(Self {
                //                             operator: Operator::Multiply,
                //                             left: Box::new(left),
                //                             right: Box::new(right),
                //                         }));
                //                     }
                //                     Open => {
                //                         match find_close_bracket(stream, idx) {
                //                             Some(close) => {
                //                                 left = ParseTree::Number(-1f64);
                //                                 let right = ParseTree::from(&stream[idx..=close])?;
                //                                 skip_to = Some(close +1);
                //                                 left = ParseTree::Node(Box::new(Self {
                //                                     operator: Operator::Multiply,
                //                                     left: Box::new(left),
                //                                     right: Box::new(right),
                //                                 }));
                //                             }
                //                             None => panic!()
                //                         }
                //                     }
                //                     _ => panic!("Unexpected token")
                //                 }
                //             }
                //         }
                //         _ => panic!("Unexpected prefix operator")
                //     }
                // }
                // Infix(op) => {
                //     if let Some((idx, token)) = iter.next() {
                //         match *token {
                //             Open => {
                //                 match find_close_bracket(stream, idx) {
                //                     Some(close) => {
                //                         let right = ParseTree::from(&stream[idx..=close])?;
                //                         skip_to = Some(close +1);
                //                         left = ParseTree::Node(Box::new(Self {
                //                             operator: op,
                //                             left: Box::new(left),
                //                             right: Box::new(right),
                //                         }));
                //                     }
                //                     None => panic!("Expected to find closing bracket")
                //                 }
                //             }
                //             Number(n) => {
                //                 if let Some(next) = stream.into_iter().skip(idx +1).next() {
                //                     match op {
                //                         Operator::Multiply |
                //                         Operator::Divide => {
                //                             let right = ParseTree::Number(n as f64);
                //                             left = ParseTree::Node(Box::new(Self {
                //                                 operator: op,
                //                                 left: Box::new(left),
                //                                 right: Box::new(right),
                //                             }));
                //                         }
                //                         Operator::Minus |
                //                         Operator::Plus => {
                //                             match next {
                //                                 Infix(next_op) => {
                //                                     match next_op {
                //                                         Operator::Multiply |
                //                                         Operator::Divide => {
                //                                             let right = ParseTree::from(&stream[idx..=idx +2])?;
                //                                             skip_to = Some(idx +3);
                //                                             left = ParseTree::Node(Box::new(Self {
                //                                                 operator: op,
                //                                                 left: Box::new(left),
                //                                                 right: Box::new(right),
                //                                             }));
                //                                         }
                //                                         _ => {
                //                                             let right = ParseTree::Number(n as f64);
                //                                             left = ParseTree::Node(Box::new(Self {
                //                                                 operator: op,
                //                                                 left: Box::new(left),
                //                                                 right: Box::new(right),
                //                                             }));
                //                                         }
                //                                     }
                //                                 }
                //                                 _ => panic!("Unexpected operator found")
                //                             }
                //                         }
                //                         _ => panic!("Unexpeted operator found")
                //                     }
                //                 } else {
                //                     let right = ParseTree::Number(n as f64);
                //                     left = ParseTree::Node(Box::new(Self {
                //                         operator: op,
                //                         left: Box::new(left),
                //                         right: Box::new(right),
                //                     }));
                //                 }
                //             }
                //             _ => panic!("Expected open or number token")
                //         }
                //     } else {
                //         panic!("Expexted stream not to end")
                //     }
                // }
                _ => panic!("Unexpected token found")
            }
        }
        
        match left {
            ParseTree::Node(node) => Ok(*node),
            ParseTree::Number(n) => panic!("Expected node")
        }
    }
    
    pub fn evaluate(&self) -> Result<f64, String> {
        use Operator::*;
        
        let left = self.left.evaluate()?;
        let right = self.right.evaluate()?;
        
        let number = match self.operator {
            Plus => left + right,
            Minus => left - right,
            Multiply => left * right,
            Divide => {
                if right == 0f64 {
                    return Err("Teilen durch Null nicht möglich".to_string());
                }
                left / right
            }
            Any => panic!()
        };
        
        Ok(number)
    }
    
    pub fn print(&self) -> String {
        use Operator::*;
        
        let left = self.left.print();
        let right = self.right.print();
        
        let op = match self.operator {
            Plus => '+',
            Minus => '-',
            Multiply => char::from_u32(0x00d7).unwrap(),
            Divide => char::from_u32(0x00f7).unwrap(),
            Any => panic!()
        };
        
        format!("({}{}{})", left, op, right)
    }
}